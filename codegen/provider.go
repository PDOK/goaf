package codegen

// this code is generated by go generate
// DO NOT EDIT BY HAND!

import (
	"net/http"
	"strings"
)

const (
	JSONContentType = "application/json"
	HTMLContentType = "text/html"
)

// These are the MIME types that the handlers support.
var SupportedContentTypes []string = []string{JSONContentType}

type Provider interface {
	Provide() (interface{}, error)
	MarshalJSON(interface{}) ([]byte, error)
	MarshalHTML(interface{}) ([]byte, error)
}

type Providers interface {
	Init() error

	NewGetLandingPageProvider(r *http.Request) (Provider, error)

	NewDescribeCollectionsProvider(r *http.Request) (Provider, error)

	NewDescribeCollectionProvider(r *http.Request) (Provider, error)

	NewGetFeaturesProvider(r *http.Request) (Provider, error)

	NewGetFeatureProvider(r *http.Request) (Provider, error)

	NewGetRequirementsClassesProvider(r *http.Request) (Provider, error)
}

// generate convenient functions to retrieve path params

// GetLandingPage
// no parameters present

// DescribeCollections
// no parameters present

// DescribeCollection
func ParametersForDescribeCollection(r *http.Request) (collectionId string) {
	pathSplit := strings.Split(r.URL.Path, "/")
	collectionId = pathSplit[2]
	return
}

// GetFeatures
func ParametersForGetFeatures(r *http.Request) (collectionId string, limit string, bbox string, datetime string, offset string) {
	pathSplit := strings.Split(r.URL.Path, "/")
	collectionId = pathSplit[2]
	limitArray, ok := r.URL.Query()["limit"]
	if ok {
		limit = limitArray[0]
	}

	bboxArray, ok := r.URL.Query()["bbox"]
	if ok {
		bbox = bboxArray[0]
	}

	datetimeArray, ok := r.URL.Query()["datetime"]
	if ok {
		datetime = datetimeArray[0]
	}

	offsetArray, ok := r.URL.Query()["offset"]
	if ok {
		offset = offsetArray[0]
	}

	return
}

// GetFeature
func ParametersForGetFeature(r *http.Request) (collectionId string, featureId string) {
	pathSplit := strings.Split(r.URL.Path, "/")
	collectionId = pathSplit[2]
	featureId = pathSplit[4]
	return
}

// GetRequirementsClasses
// no parameters present
